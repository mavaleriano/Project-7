{"version":3,"sources":["Components/404img1.png","Components/SearchForm.js","Components/Nav.js","Components/Photo.js","Components/PhotoContainer.js","Components/NotFound.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","props","state","value","loading","newSearch","bind","updateInput","e","preventDefault","undefined","this","setState","thing","toString","history","path","push","newQuery","setTimeout","console","log","target","onSubmit","className","type","onChange","name","placeholder","required","fill","height","viewBox","width","xmlns","d","React","Component","withRouter","Nav","to","Photo","url","farm","server","id","secret","src","alt","title","key","PhotoContainer","loadingPrompt","Promise","resolve","reject","mounted","then","val","match","params","query","search","results","data","toUpperCase","length","isSearch","pics","map","pic","NotFound","img","apiKey","App","_isMounted","searchFetch","curQuery","fetch","response","json","responseData","photos","photo","catch","error","searchCats","cats","searchDogs","dogs","searchSunsets","sunsets","handleQuery","exact","render","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4cfda8e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/404img1.1691d59f.png\";","// To search stuff. Keep track of it with state: so make it class component\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router';\r\n\r\n// Below site helped me figure out how to get params object to header component\r\n//https://stackoverflow.com/questions/53539314/what-is-withrouter-for-in-react-router-dom\r\n\r\nclass SearchForm extends React.Component {\r\n    static propTypes = {\r\n        match: PropTypes.object.isRequired,\r\n        location: PropTypes.object.isRequired,\r\n        history: PropTypes.object.isRequired\r\n      };\r\n    //Used below website as reference to try to make sure that search bar worked\r\n    //https://therichpost.com/get-input-field-value-button-click-reactjs/\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            loading: false\r\n        };\r\n        this.newSearch = this.newSearch.bind(this);\r\n        this.updateInput = this.updateInput.bind(this);\r\n    }\r\n\r\n    // Upon search submitted, it takes the value and called the newQuery function to request new fetch. It then uses the history object to update the url\r\n    // https://stackoverflow.com/questions/47253186/react-passing-two-functions-as-a-call-backs-to-this-setstate\r\n    /**\r\n     * \r\n     * The way I got this to work as sending to callbacks to setState\r\n     * First it changes loading to true and changes the url.\r\n     * Then it calls newQuery to fetch new data and then sets the state back to false after the data has been received\r\n     */\r\n    newSearch(e)\r\n    {\r\n        e.preventDefault();\r\n        if(this.state.value !==undefined)\r\n        {\r\n            this.setState({ loading: true }, () => {\r\n                (() => {\r\n                    let thing = this.state.value.toString();\r\n                    const { history } = this.props;\r\n                    let path = `/search/${thing}`;\r\n                    if (history) history.push(path);\r\n                    this.props.newQuery(thing);\r\n                })();\r\n                setTimeout(() => {\r\n                    console.log('To reduce or increase time to show loading screen: SearchForm.js');\r\n                    this.setState({loading: false});\r\n                }, 1000);\r\n            });\r\n        }\r\n    }\r\n\r\n    updateInput(e)\r\n    {\r\n        this.setState({\r\n            value: e.target.value \r\n        });\r\n    }\r\n\r\n    render() {\r\n            \r\n        return (\r\n            <div>\r\n                <form onSubmit={this.newSearch} className=\"search-form\">\r\n                    <input type=\"search\" onChange={this.updateInput} name=\"search\" placeholder=\"Search\" required/>\r\n                    <button type=\"submit\" className=\"search-button\">\r\n                    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    </svg>\r\n                    </button>\r\n                </form>\r\n                <div>\r\n                    <h3>\r\n                        {this.state.loading\r\n                            ? <p>Waiting for search results..</p>\r\n                            : <p></p>\r\n                        }\r\n                    </h3>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(SearchForm);","// Nav component for the apps navigations links\r\n// Stateless functional components\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * Below class uses Link to easily switch you to correct route and provide correct pictures\r\n */\r\nclass Nav extends React.Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"main-nav\">\r\n                <ul>\r\n                    <li><Link to='/cats'>Cats</Link></li>\r\n                    <li><Link to='/dogs'>Dogs</Link></li>\r\n                    <li><Link to='/sunsets'>Sunsets</Link></li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","// A photo component that displays the li and img elements\r\n// Stateless functional component: Receive data via props\r\nimport React from 'react';\r\n\r\n//https://www.flickr.com/services/api/misc.urls.html\r\n\r\nconst Photo = (props) => {\r\n        let url = `https://farm${props.farm}.staticflickr.com/${props.server}/${props.id}_${props.secret}.jpg`;\r\n        return (\r\n            <li>\r\n                <img src={url} alt={props.title} key={props.id}/>\r\n            </li>\r\n        );\r\n}\r\n\r\nexport default Photo;","// Class container where data can be managed with state\r\nimport React from 'react';\r\nimport Photo from './Photo';\r\n\r\nclass PhotoContainer extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            mounted: false\r\n        };\r\n    }\r\n    //Used this to prevent infinite loop when trying to check for results with no images\r\n    // Takes care of showing initial loading screen and has delay to make sure that it shows\r\n    componentDidMount(){ \r\n          this.loadingPrompt\r\n            .then(val => console.log(val))\r\n            .then(() => \r\n                this.setState({ \r\n                    mounted: true \r\n                }));\r\n    }\r\n\r\n    loadingPrompt = new Promise ( (resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve('Setting delay to show loading..');\r\n        }, 1000);\r\n    })\r\n\r\n    render () {\r\n        // This first if will make sure the right content is displayed each time you use the back and forward buttons\r\n        if((this.props.match.params.thing) && (this.props.query !== this.props.match.params.thing))\r\n         {\r\n             this.props.search(this.props.match.params.thing);\r\n         }\r\n         // This will make sure the default path \"/\" gets set back to soccer when going back and forward\r\n         if(!this.props.match.params.thing && this.props.query !== \"soccer\")\r\n         {\r\n             this.props.search(\"soccer\");\r\n         }\r\n        // Saves props.data into results and then save the query into title to be later displayed\r\n        const results = this.props.data;\r\n        let title = this.props.query.toString().toUpperCase();\r\n\r\n        // This checks the path and if its one of the pre-loaded links, it will manually change the title to the correct one\r\n        if (this.props.match.path === \"/cats\")\r\n        {\r\n            title = \"CATS\";\r\n        }\r\n        if (this.props.match.path === \"/dogs\")\r\n        {\r\n            title = \"DOGS\";\r\n        }\r\n        if (this.props.match.path === \"/sunsets\")\r\n        {\r\n            title = \"SUNSETS\";\r\n        }\r\n\r\n        // Setting correct response when there is no results and while waiting\r\n        if(results.length < 1 && this.state.mounted && this.props.isSearch)\r\n        {\r\n            title = `No results found for ${title} yet.. try a different search..`;\r\n        }\r\n\r\n        let pics = results.map(pic => \r\n                <Photo\r\n                    farm={pic.farm}\r\n                    id={pic.id}\r\n                    secret={pic.secret}\r\n                    server={pic.server}\r\n                    title={pic.title}\r\n                    key={pic.id}\r\n                />\r\n        );\r\n          \r\n        /**\r\n         * Used below website to figure out about conditional rendering for \"Loading..\"\r\n         * https://www.robinwieruch.de/conditional-rendering-react\r\n         */\r\n        \r\n        return (\r\n            <div>\r\n                {this.state.mounted \r\n                    ? <div className=\"photo-container\"><h2>{title}</h2><ul>{pics}</ul></div>\r\n                    : <h1>Loading your content :D</h1>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhotoContainer;","// Component for displaying a user friendly message when the search returns no results\r\nimport React from 'react';\r\nimport img from './404img1.png';\r\n\r\n/**\r\n * Used the below website to make sure I knew how to include image correctly\r\n * Below class prints out the 404 error when unavailable page is requested\r\n * https://www.edwardbeazer.com/importing-images-with-react/\r\n */\r\n\r\nclass NotFound extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"not-found\">\r\n            <h2>No results found</h2>\r\n            <p>Your url did not match any allowed results. Please try again..</p>\r\n            <img src={img} alt=\"website logo\" />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotFound;","const apiKey = '36dc9fddf7021353452281c7f3138ae8';\r\nexport default apiKey;","import React from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch} from 'react-router-dom';\nimport SearchForm from './Components/SearchForm';\nimport Nav from './Components/Nav';\nimport PhotoContainer from './Components/PhotoContainer';\nimport NotFound from './Components/NotFound';\nimport apiKey from './config';\nimport './App.css';\n\n/**\n * HEY! This is my project 7: React Gallery App\n * I'm aiming for Exceeds Expectations\n * Some of the top-most comments were just for myself as I tried to organize the project initially\n */\n\nclass App extends React.Component {\n  // Below website is reference to what I used that recommended the use of checking if mounted\n  // https://www.robinwieruch.de/react-warning-cant-call-setstate-on-an-unmounted-component\n  _isMounted = false;\n\n  constructor() {\n    super();\n    this.state = {\n      pics: [],\n      cats: [],\n      dogs: [],\n      sunsets: [],\n      curQuery: \"soccer\",\n      isSearch: false,\n    };\n  }\n\n  /*\n    Making sure to call this as soon as component mounts so fetch gets the required data\n  */\n  componentDidMount() {\n    this._isMounted = true;\n    this.searchFetch();\n    this.searchCats();\n    this.searchDogs();\n    this.searchSunsets();\n  }\n\n  /*\n    Creating this searchFetch outside of componentDidMount so i can use it outside of componentDidMount\n    This sends the fetch request and sets the response to state\n    I individually called the cats, dogs, and sunsets fetch\n  */\n\n  //**FOR GENERAL FETCHING */\n  searchFetch = (query = this.state.curQuery) => \n  {\n    fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&content_type=1`)\n      .then(response => response.json())\n      .then(responseData => \n      {\n        this.setState({ \n          pics: responseData.photos.photo,\n          curQuery: query\n        });\n        \n      })\n      .catch(error => \n      {\n        console.log('Error fetching and parsing data', error);\n      })\n  }\n\n  //**FOR CATS FETCHING */\n  searchCats = (query = \"cats\") => \n  {\n    fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&content_type=1`)\n      .then(response => response.json())\n      .then(responseData => \n      {\n        this.setState({ cats: responseData.photos.photo });\n        \n      })\n      .catch(error => \n      {\n        console.log('Error fetching and parsing data', error);\n      })\n  }\n\n  //**FOR DOGS FETCHING */\n  searchDogs = (query = \"dogs\") => \n  {\n    fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&content_type=1`)\n      .then(response => response.json())\n      .then(responseData => \n      {\n        this.setState({ dogs: responseData.photos.photo });\n        \n      })\n      .catch(error => \n      {\n        console.log('Error fetching and parsing data', error);\n      })\n  }\n  \n  //**FOR SUNSETS FETCHING */\n  searchSunsets = (query = \"sunsets\") => \n  {\n    fetch(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1&content_type=1`)\n      .then(response => response.json())\n      .then(responseData => \n      {\n        this.setState({ sunsets: responseData.photos.photo });\n        \n      })\n      .catch(error => \n      {\n        console.log('Error fetching and parsing data', error);\n      })\n  }\n\n  /**\n   * This takes care of the changing query value: it updates the state of curQuery and then calls the searchFetch function to get new data\n   * Used below website as reference\n   * https://learn.co/lessons/react-updating-state \n   */\n  handleQuery = (newQuery) => {\n    if (this._isMounted)\n    {\n      this.setState({\n          curQuery: newQuery,\n          isSearch: true\n      }, () => this.searchFetch());\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted =false;\n  }\n  \n  render() {\n    return (\n       <BrowserRouter>\n        <div className=\"container\">\n          <SearchForm //Both Searchform and Nav are headers so not included in Switch: learned the hard way!\n            newQuery={this.handleQuery}\n            isSearch={this.state.isSearch} \n          />\n          <Nav search={this.searchFetch} />\n\n          <Switch>\n            <Route exact path=\"/\" render={ (props) => // Takes care of initial/main page\n              <PhotoContainer \n                data={this.state.pics} {...props}\n                query={this.state.curQuery}\n                search={this.searchFetch}\n                newQuery={this.handleQuery}\n                isSearch={this.state.isSearch}\n                /> } />\n\n            <Route exact path=\"/cats\" render={ (props) => // Takes care of /cats page: each of the following also sends as props the corresponding data\n              <PhotoContainer \n                data={this.state.cats} {...props}\n                query={this.state.curQuery}\n                search={this.searchFetch}\n                newQuery={this.handleQuery}\n                isSearch={this.state.isSearch}\n                /> } />\n\n            <Route exact path=\"/dogs\" render={ (props) => // Takes care of /dogs page\n              <PhotoContainer \n                data={this.state.dogs} {...props}\n                query={this.state.curQuery}\n                search={this.searchFetch}\n                newQuery={this.handleQuery}\n                isSearch={this.state.isSearch}\n                /> } />\n\n            <Route exact path=\"/sunsets\" render={ (props) => // Takes care of /sunsets page\n              <PhotoContainer \n                data={this.state.sunsets} {...props}\n                query={this.state.curQuery}\n                search={this.searchFetch}\n                newQuery={this.handleQuery}\n                isSearch={this.state.isSearch}\n                /> } />\n\n            <Route exact path=\"/search/:thing\" render={ (props) => // Responds whenever something is searched and following route component takes care of notfound urls\n              <PhotoContainer\n                data={this.state.pics} {...props}\n                query={this.state.curQuery}\n                search={this.searchFetch}\n                newQuery={this.handleQuery}\n                isSearch={this.state.isSearch}\n              /> } />\n            \n            <Route component={NotFound} /> \n\n          </Switch>\n        </div>\n       </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}